{% metadata_file .yamato/package.metafile -%}
---
{% assign job_project_path = generic_project_path -%}

{% for test_setup in test_setups -%}
{% if test_setup.editor_versions -%}
  {% assign editor_versions = test_setup.editor_versions -%}
{% endif -%}

{% if test_setup.platforms -%}
  {% assign platform_ids = test_setup.platforms -%}
{% else -%}
  {% assign platform_ids = '' -%}
  {% for p in platforms -%}
    {% assign platform_ids = platform_ids | append: p[0] | append: ','  -%}
  {% endfor -%}
  {% assign platform_ids = platform_ids | split: ','  -%}
{% endif -%}

{% for editor in editor_versions -%}
{% for platform_id in platform_ids -%}
{% assign platform = platforms[platform_id] -%}

{% assign is_pr_set = false -%}
{% for pr_set in test_setup.pr_sets -%}
  {% if pr_set.platform == platform_id and pr_set.editor == editor -%}
    {% assign is_pr_set = true -%}
    {% break -%}
  {% endif -%}
{% endfor -%}
{% assign is_coverage_set = false -%}
{% for coverage_set in test_setup.coverage_sets -%}
  {% if coverage_set.platform == platform_id and coverage_set.editor == editor -%}
    {% assign is_coverage_set = true -%}
    {% break -%}
  {% endif -%}
{% endfor -%}

{% capture job_artifacts -%}
  artifacts:
    logs:
      paths:
        - "test-results~/**/*"
    Project:
      paths:
        - "{{ job_project_path }}/Packages/*.json"
        - "{{ job_project_path }}/ProjectSettings/*.asset"
        - "{{ job_project_path }}/Logs/*"{% endcapture -%}

{% if platform.test -%}
{% assign agent = agents[platform.test] -%}
{% case agent.os -%}
  {% when "win" -%}
    {% assign os = os_variables.win -%}
    {% assign editor_exe = os.yamato_source_dir | append: editor_location.win -%}
  {% when "mac" -%}
    {% assign os = os_variables.unix -%}
    {% assign editor_exe = os.yamato_source_dir | append: editor_location.mac -%}
  {% when "linux" -%}
    {% assign os = os_variables.unix -%}
    {% assign editor_exe = os.yamato_source_dir | append: editor_location.ubuntu -%}
  {% else -%}
     Platform {{ platform.test }} has unknown OS!
{% endcase -%}

test_{{ test_setup.project_setup }}_{{ platform_id }}_{{ editor }}:
  name : Test {{ test_setup.project_setup }} with {{ editor }} on {{ platform_id }}
  agent:
    type: {{ agent.type }}
    image: {{ agent.image }}
    flavor: {{ agent.flavor}}
  source:
    skip_checkout: true
  commands:
    # Clone package into sub-folder `Packages/gltf`
    - |
      mkdir Packages
      pushd Packages
      git clone {{ os.git_url }} --no-checkout gltfast
      cd gltfast
      git fetch origin {{ os.git_revision }}
      git checkout -f --detach {{ os.git_revision }}
      popd

    # Clone all test asset repositories into `Assets`
    - mkdir Assets
{% for asset_set in asset_sets -%}
    - |
      pushd Assets
      git clone {{ asset_set.git_uri }} --no-checkout {{ asset_set.name }}
      cd {{ asset_set.name }}
      git fetch origin {{ asset_set.git_revision }}
      git checkout -f --detach {{ asset_set.git_revision }}
      popd
{% endfor -%}

    # Install unity-downloader-cli and unity-config
{% if agent.os == "win" -%}
    - |
      where /q gsudo.exe && set CMD_ADMIN=gsudo.exe
      %CMD_ADMIN% choco source add --priority 1 -n Unity -s {{ registry.artifactory }}/api/nuget/unity-choco-local
      %CMD_ADMIN% choco install unity-config -y
      %CMD_ADMIN% choco install unity-downloader-cli -y
{% elsif agent.os == "mac" -%}
    - brew tap --force-auto-update unity/unity git@github.cds.internal.unity3d.com:unity/homebrew-unity.git
    - brew install unity-config
{% endif -%}

    # Install UnifiedTestRunner
{% if agent.os == "win" -%}
    - curl -s --show-error --retry 15 {{ registry.artifactory }}/unity-tools-local/utr-standalone/utr.bat --output {{ os.tool_utr }}
{% else -%}
    - curl -s --show-error --retry 15 {{ registry.artifactory }}/unity-tools-local/utr-standalone/utr --output {{ os.tool_utr }}
    - chmod +x {{ os.tool_utr }}
{% endif -%}

    # Install Unity Editor and required components
    - unity-downloader-cli -u {{ editor }} -c Editor -c {{ platform.component }} -w --fast

    # Create test project
    - |
      unity-config project create {{ job_project_path }}
      unity-config project add testable com.unity.cloud.gltfast
      unity-config project add dependency com.unity.cloud.gltfast@file:./../../../Packages/gltfast
      unity-config project add dependency {{ test_framework }} -p {{ job_project_path }}
{% for dep in test_dependencies -%}
      unity-config project add dependency {{ dep.id }}@{{ dep.version }} -p {{ job_project_path }}
{% endfor -%}

{% capture results_path -%}{{ os.yamato_source_dir }}/test-results~/com.unity.cloud.gltfast/{{ platform_id }}/{{ editor }}/{{ test_setup.project_setup }}{% endcapture -%}

    # Apply project setup
    - >
      {{ editor_exe }}
      -projectPath {{ job_project_path }}
      -executeMethod GLTFast.Editor.Tests.SetupProject.ApplySetup glTFastSetup:{{ test_setup.project_setup }}
      -upmNoDefaultPackages
      -enablePackageManagerTraces
      -batchmode
      -quit
      -logFile {{ results_path }}/UnityProjectSetup.log

{% if test_setup.render_pipeline -%}
    # Apply render pipeline asset
    - >
      {{ editor_exe }}
      -projectPath {{ job_project_path }}
      -executeMethod GLTFast.Editor.Tests.SetupProject.SetRenderPipeline SRP:{{ test_setup.render_pipeline }}
      -upmNoDefaultPackages
      -enablePackageManagerTraces
      -batchmode
      -quit
      -logFile {{ results_path }}/UnityProjectSetup.log
{% endif -%}

    # Run Tests
    # TODO: upm-ci rocks UPM and other cache directories. Maybe we can speed things up this way as well.
    # TODO: DISABLE_SUB_PACKAGE_LOAD is required for 2020 only. Eventually remove all occurrences.
    - >
{% if agent.os == "win" -%}
      set GLTF_TEST_ASSET_DIR={{ os.yamato_source_dir }}\Assets

      set DISABLE_SUB_PACKAGE_LOAD=TRUE
{% else -%}
      export GLTF_TEST_ASSET_DIR="{{ os.yamato_source_dir }}/Assets"

      export DISABLE_SUB_PACKAGE_LOAD=TRUE
{% endif -%}

      {{ os.tool_utr }} 
      --testproject={{ job_project_path }}
      --editor-location=.Editor
      --artifacts_path={{ results_path }}
      --reruncount=2
      --verbose
      --extra-editor-arg="-enablePackageManagerTraces -upmNoDefaultPackages"
      --suite=editor
      --suite=playmode
{% if is_coverage_set -%}
      --enable-code-coverage
      --coverage-results-path={{ results_path }}
      --coverage-options='generateAdditionalMetrics;generateHtmlReport;assemblyFilters:+glTFast*,+Unity.Cloud.Gltfast*,-glTFast*Tests*;pathReplacePatterns:**/PackageCache/com.unity.cloud.gltfast@*/,;sourcePaths:{{ os.yamato_source_dir }}/Packages/gltfast'
      --coverage-results-path={{ os.yamato_source_dir }}/test-results~/CoverageResults
      --coverage-upload-options="reportsDir:{{ os.yamato_source_dir }}/test-results~/CoverageResults;reports:*.xml;sourceDir:Packages/gltfast;repo:unity/com.unity.cloud.gltfast.src;changeset:{{ os.git_revision }};name:{{ test_setup.project_setup }}_{{ platform_id }}_{{ editor }};flags:{{ test_setup.project_setup }};verbose"
{% endif -%}
{{ job_artifacts }}
{% endif -%}

{% if platform.build_and_run -%}
{% assign agent = agents[platform.build_and_run] -%}
{% case agent.os -%}
  {% when "win" -%}
    {% assign os = os_variables.win -%}
    {% assign editor_exe = os.yamato_source_dir | append: editor_location.win -%}
  {% when "mac" -%}
    {% assign os = os_variables.unix -%}
    {% assign editor_exe = os.yamato_source_dir | append: editor_location.mac -%}
  {% when "linux" -%}
    {% assign os = os_variables.unix -%}
    {% assign editor_exe = os.yamato_source_dir | append: editor_location.ubuntu -%}
  {% else -%}
     Platform {{ platform.build_and_run }} has unknown OS!
{% endcase -%}

build_and_run_{{ test_setup.project_setup }}_{{ platform_id }}_{{ editor }}:
  name : Build and run {{ test_setup.project_setup }} with {{ editor }} on {{ platform_id }}
  agent:
{% assign agent = agents[platform.build_and_run] -%}
    type: {{ agent.type }}
    image: {{ agent.image }}
    flavor: {{ agent.flavor}}
  source:
    skip_checkout: true
  commands:
    # Clone package into sub-folder `Packages/gltf`
    - |
      mkdir Packages
      pushd Packages
      git clone {{ os.git_url }} --no-checkout gltfast
      cd gltfast
      git fetch origin {{ os.git_revision }}
      git checkout -f --detach {{ os.git_revision }}
      popd

    # Clone all test asset repositories into `Assets`
    - mkdir Assets
{% for asset_set in asset_sets -%}
    - |
      pushd Assets
      git clone {{ asset_set.git_uri }} --no-checkout {{ asset_set.name }}
      cd {{ asset_set.name }}
      git fetch origin {{ asset_set.git_revision }}
      git checkout -f --detach {{ asset_set.git_revision }}
      popd
{% endfor -%}

    # Install unity-downloader-cli and unity-config
{% if agent.os == "win" -%}
    - |
      where /q gsudo.exe && set CMD_ADMIN=gsudo.exe
      %CMD_ADMIN% choco source add --priority 1 -n Unity -s {{ registry.artifactory }}/api/nuget/unity-choco-local
      %CMD_ADMIN% choco install unity-config -y
      %CMD_ADMIN% choco install unity-downloader-cli -y
{% elsif agent.os == "mac" -%}
    - brew tap --force-auto-update unity/unity git@github.cds.internal.unity3d.com:unity/homebrew-unity.git
    - brew install unity-config
{% endif -%}

    # Install UnifiedTestRunner
{% if agent.os == "win" -%}
    - curl -s --show-error --retry 15 {{ registry.artifactory }}/unity-tools-local/utr-standalone/utr.bat --output {{ os.tool_utr }}
{% else -%}
    - curl -s --show-error --retry 15 {{ registry.artifactory }}/unity-tools-local/utr-standalone/utr --output {{ os.tool_utr }}
    - chmod +x {{ os.tool_utr }}
{% endif -%}

    # Install Unity Editor and required components
    - unity-downloader-cli -u {{ editor }} -c Editor -c {{ platform.component }} -w --fast

    # Create test project
    - |
      unity-config project create {{ job_project_path }}
      unity-config project add testable com.unity.cloud.gltfast
      unity-config project add dependency com.unity.cloud.gltfast@file:./../../../Packages/gltfast
      unity-config project add dependency {{ test_framework }} -p {{ job_project_path }}
{% for dep in test_dependencies -%}
      unity-config project add dependency {{ dep.id }}@{{ dep.version }} -p {{ job_project_path }}
{% endfor -%}

{% capture results_path -%}{{ os.yamato_source_dir }}/test-results~/com.unity.cloud.gltfast/{{ platform_id }}/{{ editor }}/{{ test_setup.project_setup }}{% endcapture -%}

    # Apply project setup
    - >
      {{ editor_exe }}
      -projectPath {{ job_project_path }}
      -executeMethod GLTFast.Editor.Tests.SetupProject.ApplySetup glTFastSetup:{{ test_setup.project_setup }}
      -upmNoDefaultPackages
      -enablePackageManagerTraces
      -batchmode
      -quit
      -logFile {{ results_path }}/UnityProjectSetup.log

{% if test_setup.render_pipeline -%}
    # Apply render pipeline asset
    - >
      {{ editor_exe }}
      -projectPath {{ job_project_path }}
      -executeMethod GLTFast.Editor.Tests.SetupProject.SetRenderPipeline SRP:{{ test_setup.render_pipeline }}
      -upmNoDefaultPackages
      -enablePackageManagerTraces
      -batchmode
      -quit
      -logFile {{ results_path }}/UnityProjectSetup.log
{% endif -%}

    # Run Tests
    # TODO: upm-ci rocks UPM and other cache directories. Maybe we can speed things up this way as well.
    # TODO: DISABLE_SUB_PACKAGE_LOAD is required for 2020 only. Eventually remove all occurrences.
    - >
{% if agent.os == "win" -%}
      set GLTF_TEST_ASSET_DIR={{ os.yamato_source_dir }}\Assets

      set DISABLE_SUB_PACKAGE_LOAD=TRUE
{% else -%}
      export GLTF_TEST_ASSET_DIR="{{ os.yamato_source_dir }}/Assets"

      export DISABLE_SUB_PACKAGE_LOAD=TRUE
{% endif -%}

      {{ os.tool_utr }} 
      --testproject={{ job_project_path }}
      --editor-location=.Editor
      --artifacts_path={{ results_path }}
      --reruncount=2
      --verbose
      --extra-editor-arg="-enablePackageManagerTraces -upmNoDefaultPackages"
      --suite=playmode
      --scripting-backend=Il2Cpp
      --platform={% if platform.platform -%}{{ platform.platform }}{% else -%}{{ platform_id }}{% endif %}
{{ job_artifacts }}
{% endif -%}

{% if platform.build -%}
{% assign agent = agents[platform.build] -%}
{% case agent.os -%}
  {% when "win" -%}
    {% assign os = os_variables.win -%}
    {% assign editor_exe = os.yamato_source_dir | append: editor_location.win -%}
  {% when "mac" -%}
    {% assign os = os_variables.unix -%}
    {% assign editor_exe = os.yamato_source_dir | append: editor_location.mac -%}
  {% when "linux" -%}
    {% assign os = os_variables.unix -%}
    {% assign editor_exe = os.yamato_source_dir | append: editor_location.ubuntu -%}
  {% else -%}
     Platform {{ platform.build }} has unknown OS!
{% endcase -%}

build_{{ test_setup.project_setup }}_{{ platform_id }}_{{ editor }}:
  name : Build {{ test_setup.project_setup }} with {{ editor }} on {{ platform_id }}
  agent:
{% assign agent = agents[platform.build] -%}
    type: {{ agent.type }}
    image: {{ agent.image }}
    flavor: {{ agent.flavor}}
  source:
    skip_checkout: true
  commands:
    # Clone package into sub-folder `Packages/gltf`
    - |
      mkdir Packages
      pushd Packages
      git clone {{ os.git_url }} --no-checkout gltfast
      cd gltfast
      git fetch origin {{ os.git_revision }}
      git checkout -f --detach {{ os.git_revision }}
      popd

    # Clone all test asset repositories into `Assets`
    - mkdir Assets
{% for asset_set in asset_sets -%}
    - |
      pushd Assets
      git clone {{ asset_set.git_uri }} --no-checkout {{ asset_set.name }}
      cd {{ asset_set.name }}
      git fetch origin {{ asset_set.git_revision }}
      git checkout -f --detach {{ asset_set.git_revision }}
      popd
{% endfor -%}

    # Install unity-downloader-cli and unity-config
{% if agent.os == "win" -%}
    - |
      where /q gsudo.exe && set CMD_ADMIN=gsudo.exe
      %CMD_ADMIN% choco source add --priority 1 -n Unity -s {{ registry.artifactory }}/api/nuget/unity-choco-local
      %CMD_ADMIN% choco install unity-config -y
      %CMD_ADMIN% choco install unity-downloader-cli -y
{% elsif agent.os == "mac" -%}
    - brew tap --force-auto-update unity/unity git@github.cds.internal.unity3d.com:unity/homebrew-unity.git
    - brew install unity-config
{% endif -%}

    # Install UnifiedTestRunner
{% if agent.os == "win" -%}
    - curl -s --show-error --retry 15 {{ registry.artifactory }}/unity-tools-local/utr-standalone/utr.bat --output {{ os.tool_utr }}
{% else -%}
    - curl -s --show-error --retry 15 {{ registry.artifactory }}/unity-tools-local/utr-standalone/utr --output {{ os.tool_utr }}
    - chmod +x {{ os.tool_utr }}
{% endif -%}

    # Install Unity Editor and required components
    - unity-downloader-cli -u {{ editor }} -c Editor -c {{ platform.component }} -w --fast

    # Create test project
    - |
      unity-config project create {{ job_project_path }}
      unity-config project add testable com.unity.cloud.gltfast
      unity-config project add dependency com.unity.cloud.gltfast@file:./../../../Packages/gltfast
      unity-config project add dependency {{ test_framework }} -p {{ job_project_path }}
{% for dep in test_dependencies -%}
      unity-config project add dependency {{ dep.id }}@{{ dep.version }} -p {{ job_project_path }}
{% endfor -%}

{% capture results_path -%}{{ os.yamato_source_dir }}/test-results~/com.unity.cloud.gltfast/{{ platform_id }}/{{ editor }}/{{ test_setup.project_setup }}{% endcapture -%}

    # Apply project setup
    - >
      {{ editor_exe }}
      -projectPath {{ job_project_path }}
      -executeMethod GLTFast.Editor.Tests.SetupProject.ApplySetup glTFastSetup:{{ test_setup.project_setup }}
      -upmNoDefaultPackages
      -enablePackageManagerTraces
      -batchmode
      -quit
      -logFile {{ results_path }}/UnityProjectSetup.log

{% if test_setup.render_pipeline -%}
    # Apply render pipeline asset
    - >
      {{ editor_exe }}
      -projectPath {{ job_project_path }}
      -executeMethod GLTFast.Editor.Tests.SetupProject.SetRenderPipeline SRP:{{ test_setup.render_pipeline }}
      -upmNoDefaultPackages
      -enablePackageManagerTraces
      -batchmode
      -quit
      -logFile {{ results_path }}/UnityProjectSetup.log
{% endif -%}

    # Run Tests
    # TODO: upm-ci rocks UPM and other cache directories. Maybe we can speed things up this way as well.
    # TODO: DISABLE_SUB_PACKAGE_LOAD is required for 2020 only. Eventually remove all occurrences.
    - >
{% if agent.os == "win" -%}
      set GLTF_TEST_ASSET_DIR={{ os.yamato_source_dir }}\Assets

      set DISABLE_SUB_PACKAGE_LOAD=TRUE
{% else -%}
      export GLTF_TEST_ASSET_DIR="{{ os.yamato_source_dir }}/Assets"

      export DISABLE_SUB_PACKAGE_LOAD=TRUE
{% endif -%}

      {{ os.tool_utr }} 
      --testproject={{ job_project_path }}
      --editor-location=.Editor
      --artifacts_path={{ results_path }}
      --reruncount=2
      --verbose
      --extra-editor-arg="-enablePackageManagerTraces -upmNoDefaultPackages"
      --suite=playmode
      --scripting-backend=Il2Cpp
      --platform={% if platform.platform -%}{{ platform.platform }}{% else -%}{{ platform_id }}{% endif %}
      --build-only
      --player-save-path={{ results_path }}/player
  artifacts:
    logs:
      paths:
        - "test-results~/**/*"
{% endif -%}

{% if platform.run -%}
{% assign agent = agents[platform.run] -%}
{% case agent.os -%}
  {% when "win" -%}
    {% assign os = os_variables.win -%}
    {% assign editor_exe = os.yamato_source_dir | append: editor_location.win -%}
  {% when "mac" -%}
    {% assign os = os_variables.unix -%}
    {% assign editor_exe = os.yamato_source_dir | append: editor_location.mac -%}
  {% when "linux" -%}
    {% assign os = os_variables.unix -%}
    {% assign editor_exe = os.yamato_source_dir | append: editor_location.ubuntu -%}
  {% else -%}
     Platform {{ platform.run }} has unknown OS!
{% endcase -%}

run_{{ test_setup.project_setup }}_{{ platform_id }}_{{ editor }}:
  name : Run {{ test_setup.project_setup }} with {{ editor }} on {{ platform_id }}
  agent:
{% assign agent = agents[platform.run] -%}
    type: {{ agent.type }}
    image: {{ agent.image }}
    flavor: {{ agent.flavor}}
  source:
    skip_checkout: true
  commands:
    # Clone package into sub-folder `Packages/gltf`
    - |
      mkdir Packages
      pushd Packages
      git clone {{ os.git_url }} --no-checkout gltfast
      cd gltfast
      git fetch origin {{ os.git_revision }}
      git checkout -f --detach {{ os.git_revision }}
      popd

    # Install unity-downloader-cli and unity-config
{% if agent.os == "win" -%}
    - |
      where /q gsudo.exe && set CMD_ADMIN=gsudo.exe
      %CMD_ADMIN% choco source add --priority 1 -n Unity -s {{ registry.artifactory }}/api/nuget/unity-choco-local
      %CMD_ADMIN% choco install unity-config -y
      %CMD_ADMIN% choco install unity-downloader-cli -y
{% elsif agent.os == "mac" -%}
    - brew tap --force-auto-update unity/unity git@github.cds.internal.unity3d.com:unity/homebrew-unity.git
    - brew install unity-config
{% endif -%}

    # Install UnifiedTestRunner
{% if agent.os == "win" -%}
    - curl -s --show-error --retry 15 {{ registry.artifactory }}/unity-tools-local/utr-standalone/utr.bat --output {{ os.tool_utr }}
{% else -%}
    - curl -s --show-error --retry 15 {{ registry.artifactory }}/unity-tools-local/utr-standalone/utr --output {{ os.tool_utr }}
    - chmod +x {{ os.tool_utr }}
{% endif -%}

    # Install Unity Editor and required components
    - unity-downloader-cli -u {{ editor }} -c Editor -c {{ platform.component }} -w --fast

    # Create test project
    - |
      unity-config project create {{ job_project_path }}
      unity-config project add testable com.unity.cloud.gltfast
      unity-config project add dependency com.unity.cloud.gltfast@file:./../../../Packages/gltfast
      unity-config project add dependency {{ test_framework }} -p {{ job_project_path }}
{% for dep in test_dependencies -%}
      unity-config project add dependency {{ dep.id }}@{{ dep.version }} -p {{ job_project_path }}
{% endfor -%}

{% capture results_path -%}{{ os.yamato_source_dir }}/test-results~/com.unity.cloud.gltfast/{{ platform_id }}/{{ editor }}/{{ test_setup.project_setup }}{% endcapture -%}

    # Apply project setup
    - >
      {{ editor_exe }}
      -projectPath {{ job_project_path }}
      -executeMethod GLTFast.Editor.Tests.SetupProject.ApplySetup glTFastSetup:{{ test_setup.project_setup }}
      -upmNoDefaultPackages
      -enablePackageManagerTraces
      -batchmode
      -quit
      -logFile {{ results_path }}/UnityProjectSetup.log

{% if test_setup.render_pipeline -%}
    # Apply render pipeline asset
    - >
      {{ editor_exe }}
      -projectPath {{ job_project_path }}
      -executeMethod GLTFast.Editor.Tests.SetupProject.SetRenderPipeline SRP:{{ test_setup.render_pipeline }}
      -upmNoDefaultPackages
      -enablePackageManagerTraces
      -batchmode
      -quit
      -logFile {{ results_path }}/UnityProjectSetup.log
{% endif -%}

{% if platform_id == "android" and platform.run == "shield" -%}
{% assign androidUrlPrefix = "https://artifactory-slo.bf.unity3d.com/artifactory/mobile-generic/android/ADBKeys.zip!" -%}
    - |
      set ANDROID_DEVICE_CONNECTION={{ os.bokken_host_ip }};
      wget {{ androidUrlPrefix }}/adbkey.pub -O %USERPROFILE%/.android/adbkey.pub
      wget {{ androidUrlPrefix }}/adbkey -O %USERPROFILE%/.android/adbkey
      gsudo NetSh Advfirewall set allprofiles state off
      "%ANDROID_SDK_ROOT%\platform-tools\adb.exe" connect {{ os.bokken_host_ip }}
{% endif -%}

    # Run Tests
    # TODO: upm-ci rocks UPM and other cache directories. Maybe we can speed things up this way as well.
    # TODO: DISABLE_SUB_PACKAGE_LOAD is required for 2020 only. Eventually remove all occurrences.
    - >
{% if agent.os == "win" -%}
      set GLTF_TEST_ASSET_DIR={{ os.yamato_source_dir }}\Assets

      set DISABLE_SUB_PACKAGE_LOAD=TRUE
{% else -%}
      export GLTF_TEST_ASSET_DIR="{{ os.yamato_source_dir }}/Assets"

      export DISABLE_SUB_PACKAGE_LOAD=TRUE
{% endif -%}

      {{ os.tool_utr }} 
      --testproject={{ job_project_path }}
      --editor-location=.Editor
      --artifacts_path={{ results_path }}
      --reruncount=2
      --verbose
      --extra-editor-arg="-enablePackageManagerTraces -upmNoDefaultPackages"
      --suite=playmode
      --scripting-backend=Il2Cpp
      --platform={% if platform.platform -%}{{ platform.platform }}{% else -%}{{ platform_id }}{% endif %}
      --player-load-path={{ results_path }}/player
{% if platform_id == "android" and platform.run == "shield" -%}
      --player-connection-ip={{ os.bokken_host_ip }}
{% endif -%}
{% if platform.build -%}
  dependencies:
    - .yamato/project-test.yml#build_{{ test_setup.project_setup }}_{{ platform_id }}_{{ editor }}
{% endif -%}
{{ job_artifacts }}
{% endif -%}


{% endfor -%}
{% endfor -%}

tests_{{ test_setup.project_setup }}_all:
  name: Test all {{ test_setup.project_setup }}
  dependencies:
{% for editor in editor_versions -%}
{% for platform_id in platform_ids -%}
{% if platforms[platform_id].test -%}
    - .yamato/project-test.yml#test_{{ test_setup.project_setup }}_{{ platform_id }}_{{ editor }}
{% endif -%}
{% endfor -%}
{% endfor -%}

tests_{{ test_setup.project_setup }}_pr:
  name: Test PR subset {{ test_setup.project_setup }}
  dependencies:
{% for pr_set in test_setup.pr_sets -%}
    - .yamato/project-test.yml#test_{{ test_setup.project_setup }}_{{ pr_set.platform }}_{{ pr_set.editor }}
{% endfor -%}

build_and_run_{{ test_setup.project_setup }}_all:
  name: Build and run all {{ test_setup.project_setup }}
  dependencies:
{% for editor in editor_versions -%}
{% for platform_id in platform_ids -%}
{% if platforms[platform_id].build_and_run -%}
    - .yamato/project-test.yml#build_and_run_{{ test_setup.project_setup }}_{{ platform_id }}_{{ editor }}
{% elsif platforms[platform_id].run -%}
    - .yamato/project-test.yml#run_{{ test_setup.project_setup }}_{{ platform_id }}_{{ editor }}
{% endif -%}
{% endfor -%}
{% endfor -%}

build_and_run_{{ test_setup.project_setup }}_pr:
  name: Build and run PR subset {{ test_setup.project_setup }}
  dependencies:
{% for pr_set in test_setup.pr_sets -%}
{% if platforms[pr_set.platform].build_and_run -%}
    - .yamato/project-test.yml#build_and_run_{{ test_setup.project_setup }}_{{ pr_set.platform }}_{{ pr_set.editor }}
{% elsif platforms[pr_set.platform].run -%}
    - .yamato/project-test.yml#run_{{ test_setup.project_setup }}_{{ pr_set.platform }}_{{ pr_set.editor }}
{% endif -%}
{% endfor -%}

{% endfor -%}

tests_all:
  name: Test all
  dependencies:
{% for test_setup in test_setups -%}
    - .yamato/project-test.yml#tests_{{ test_setup.project_setup }}_all
{% endfor -%}

tests_pr:
  name: Test PR subsets
  dependencies:
{% for test_setup in test_setups -%}
    - .yamato/project-test.yml#tests_{{ test_setup.project_setup }}_pr
{% endfor -%}

build_and_run_all:
  name: Build and run all
  dependencies:
{% for test_setup in test_setups -%}
    - .yamato/project-test.yml#build_and_run_{{ test_setup.project_setup }}_all
{% endfor -%}

build_and_run_pr:
  name: Build and run PR subsets
  dependencies:
{% for test_setup in test_setups -%}
    - .yamato/project-test.yml#build_and_run_{{ test_setup.project_setup }}_pr
{% endfor -%}

coverage_all:
  name: Coverage All
  dependencies:
{% for test_setup in test_setups -%}
{% for coverage_set in test_setup.coverage_sets -%}
    - .yamato/project-test.yml#test_{{ test_setup.project_setup }}_{{ coverage_set.platform }}_{{ coverage_set.editor }}
{% endfor -%}
{% endfor -%}
